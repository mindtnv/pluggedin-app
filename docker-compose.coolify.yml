services:
  pluggedin-postgres:
    container_name: pluggedin-postgres
    image: postgres:16.2-alpine3.18
    restart: always
    environment:
      # генерируем и сохраняем пароль БД
      - POSTGRES_DB=pluggedin
      - POSTGRES_USER=pluggedin
      - POSTGRES_PASSWORD=${SERVICE_PASSWORD_DB}
    volumes:
      - pluggedin-postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h pluggedin-postgres -p 5432 -U plugggedin -d pluggedin"]
      interval: 5s
      timeout: 5s
      retries: 5

  drizzle-migrate:
    container_name: pluggedin-migrate
    build:
      context: .
      dockerfile: Dockerfile
      target: migrator
    restart: "no"
    # исключаем из общих healthchecks Coolify
    exclude_from_hc: true
    command: >
      sh -c "
        echo 'Waiting for database to be ready...';
        until pg_isready -h pluggedin-postgres -p 5432 -U plugggedin; do
          echo 'Database is unavailable - sleeping';
          sleep 2;
        done;
        echo 'Database is up - running migrations';
        pnpm drizzle-kit migrate
      "
    environment:
      # используем тот же сгенерированный пароль
      - PGUSER=plugggedin
      - PGHOST=pluggedin-postgres
      - PGDATABASE=pluggedin
      - DATABASE_URL=postgresql://plugggedin:${SERVICE_PASSWORD_DB}@pluggedin-postgres:5432/pluggedin
    depends_on:
      pluggedin-postgres:
        condition: service_healthy

  pluggedin-app:
    container_name: pluggedin-app
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    # генерируем FQDN и проксирование на порт 3000
    environment:
      - SERVICE_FQDN_APP_3000
      # подставляем актуальный URL фронта из Coolify
      - NEXTAUTH_URL=$SERVICE_URL_APP
      - NEXT_PUBLIC_APP_URL=$SERVICE_URL_APP

      - NODE_ENV=production

      # генерируем секреты (длинные, base64/realbase64 можно менять)
      - NEXTAUTH_SECRET=${SERVICE_BASE64_64_NEXTAUTH}
      - NEXT_SERVER_ACTIONS_ENCRYPTION_KEY=${SERVICE_REALBASE64_64_SERVERACTIONS}

      # БД: используем сгенерированный пароль
      - DATABASE_URL=postgresql://plugggedin:${SERVICE_PASSWORD_DB}@pluggedin-postgres:5432/pluggedin

      # фичи
      - ENABLE_RAG=${ENABLE_RAG:-true}
      - ENABLE_NOTIFICATIONS=${ENABLE_NOTIFICATIONS:-true}
      - ENABLE_EMAIL_VERIFICATION=${ENABLE_EMAIL_VERIFICATION:-false}

      # почта / oauth / api-ключи — по необходимости (можно занести через UI)
      - EMAIL_FROM=${EMAIL_FROM:-noreply@plugged.in}
      - EMAIL_FROM_NAME=${EMAIL_FROM_NAME:-Pluggedin}
      - EMAIL_SERVER_HOST
      - EMAIL_SERVER_PORT=587
      - EMAIL_SERVER_USER
      - EMAIL_SERVER_PASSWORD
      - GITHUB_ID
      - GITHUB_SECRET
      - GOOGLE_CLIENT_ID
      - GOOGLE_CLIENT_SECRET
      - ANTHROPIC_API_KEY
      - OPENAI_API_KEY
      - GOOGLE_API_KEY

    depends_on:
      pluggedin-postgres:
        condition: service_healthy
      drizzle-migrate:
        condition: service_completed_successfully

volumes:
  pluggedin-postgres:
    driver: local
