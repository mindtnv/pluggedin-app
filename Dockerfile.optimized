FROM node:20-alpine AS base
RUN corepack enable && corepack prepare pnpm@9.0.0 --activate

# Dependencies stage с кэшированием pnpm store
FROM base AS deps
WORKDIR /app

# Копируем только файлы для установки зависимостей (максимальное кэширование)
COPY package.json pnpm-lock.yaml* ./
COPY scripts ./scripts

# Используем mount cache для pnpm store
RUN --mount=type=cache,target=/root/.local/share/pnpm/store \
    pnpm install --frozen-lockfile

# Production deps (меньший размер)
FROM base AS prod-deps
WORKDIR /app
COPY package.json pnpm-lock.yaml* ./
RUN --mount=type=cache,target=/root/.local/share/pnpm/store \
    pnpm install --frozen-lockfile --prod

# Builder с кэшированием Next.js
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

ENV NEXT_TELEMETRY_DISABLED=1

# Кэшируем .next/cache между сборками
RUN --mount=type=cache,target=/app/.next/cache \
    pnpm build

# Migrator (минимальный размер)
FROM base AS migrator
WORKDIR /app
RUN apk add --no-cache postgresql-client
COPY --from=prod-deps /app/node_modules ./node_modules
COPY drizzle ./drizzle
COPY drizzle.config.ts package.json ./
ENV NODE_ENV=production
CMD ["pnpm", "drizzle-kit", "migrate"]

# Production runner (оптимизированный)
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Создаем пользователя одной командой
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs && \
    mkdir .next && \
    chown nextjs:nodejs .next

# Копируем только необходимое для production
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs
EXPOSE 3000
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

CMD ["node", "server.js"]